#!/bin/bash
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to exercise the S2I scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME-jtslear/phoenix-builder-candidate}

test_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
test_app="hello_world"
image_dir="$( cd "$( dirname "${test_dir}")" && pwd )"

test_port="$(docker inspect --format='{{range $key, $value := .Config.ExposedPorts }}{{$key}}{{end}}' ${IMAGE_NAME} | sed 's/\/.*//')"

info() {
  echo -e "\n[INFO] $@...\n"
}

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

container_ip() {
  #if [ -n "$DOCKER_MACHINE_NAME" ]; then
  #  docker-machine ip ${DOCKER_MACHINE_NAME}
  #else
  #  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat $cid_file)
  #fi
  echo "127.0.0.1"
}

get_docker_exec_command() {
  if [ $CIRCLECI ]; then
    sudo lxc-attach -n "$(docker inspect --format "{{.Id}}" $(cat $cid_file))" -- /bin/bash -c "${run_cmd}"
  else
    docker exec $(cat ${cid_file}) /bin/bash -c "${run_cmd}"
  fi
}

run_s2i_build() {
  s2i build ${s2i_args} file://${test_dir}/${test_app} ${IMAGE_NAME} ${IMAGE_NAME}-${test_app}
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
}

run_test_application() {
  run_args=${CONTAINER_ARGS:-}
  docker run --user=1001 ${run_args} --cidfile=${cid_file} -p ${test_port}:${test_port} ${IMAGE_NAME}-${test_app}
}

cleanup_test_app() {
  info "Cleaning up the test application"
  if [ -f $cid_file ]; then
    if container_exists; then
      docker stop $(cat $cid_file)
      docker rm $(cat $cid_file)
    fi
    rm $cid_file
  fi
}

cleanup() {
  info "Cleaning up the test application image"
  if image_exists ${IMAGE_NAME}-${test_app}; then
    docker rmi -f ${IMAGE_NAME}-${test_app}
  fi
  rm -rf ${test_dir}/${test_app}/.git
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    info "TEST FAILED (${result})"
    cleanup
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  info "Waiting for application container to start"
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && [ -s $cid_file ] && break
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

test_s2i_usage() {
  info "Testing 's2i usage'"
  s2i usage ${s2i_args} ${IMAGE_NAME} &>/dev/null
}

test_docker_run_usage() {
  info "Testing 'docker run' usage"
  docker run ${IMAGE_NAME} &>/dev/null
}

test_scl_usage() {
  local run_cmd="$1"
  local expected="$2"

  info "Testing the image SCL enable"
  out=$(docker run --rm ${IMAGE_NAME} /bin/bash -c "${run_cmd}")
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(get_docker_exec_command 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}

test_connection() {
  cat $cid_file
  info "Testing the HTTP connection (http://$(container_ip):${test_port})"
  local max_attempts=2
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    response_code=$(curl -s -w %{http_code} -o /dev/null http://$(container_ip):${test_port}/)
    status=$?
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        result=0
        break
      fi
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}

test_application() {
  # Verify that the HTTP connection can be established to test application container
  run_test_application &

  # Wait for the container to write it's CID file
  wait_for_cid

  test_scl_usage "elixir --version" "OTP 19"
  check_result $?
  test_scl_usage "elixir --version" "Elixir 1.4.1"
  check_result $?
  test_scl_usage "node --version" "v6.9.4"
  check_result $?

  test_connection
  check_result $?
  cleanup_test_app
}

cid_file=$( echo "$(mktemp -u XXXXX).cid")

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--force-pull=false"

prepare
run_s2i_build
check_result $?

# Verify the 'usage' script is working properly when running the base image with 's2i usage ...'
test_s2i_usage
check_result $?

# Verify the 'usage' script is working properly when running the base image with 'docker run ...'
test_docker_run_usage
check_result $?

# Test application with default uid
test_application

# Test application with random uid
CONTAINER_ARGS="-u 12345" test_application
cleanup

info "All tests finished successfully."
